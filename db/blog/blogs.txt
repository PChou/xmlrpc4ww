id#filename#content#title#layout#description#thumbimg#categories#tags#createdate#moddate#
inc#str#str#str#str#str#str#str#str#str#str#
1#filename#content#title#layout#description#thumbimg#categories#tags#createdate#moddate#
4#2013-10-23-526712a543031.html#<h1>缘起</h1> <p>在之前的文章<a href="http://pchou.info/web-build/2013/01/20/build-github-blog-page-07.html">一步步在GitHub上创建博客主页(7)--兼容Windows Writer的服务提供器</a>中，为了使编写博客和发布博客更加方便，我实现了一个windows writer的服务提供器，基于.NET和XML-RPC.NET。在实际使用过程中其实遇到不少问题，比如文章的二次编辑修改将无法支持，多个windows writer客户端无法同步编辑，提供器部署复杂等。思考下来觉得还是得有数据库支持，而且要尽可能的方便部署和同步数据。于是决定用PHP重新实现一个，PHP有以下特点：</p> <ul> <li>轻巧，部署方便  <li>能够轻便的支持基于文本的数据库，可以实现多客户端“分布式编辑”</li></ul> <p>&nbsp;</p> <h1>系统运作方式</h1> <p>假设用户现在只有一台PC1用来写blog，系统运行机制如下：</p> <p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" class="img-responsive" title="image" border="0" alt="image" src="http://fakelocalhost/assert/img/2013-10-23-5267cbc7d3656.png" width="313" height="440"></p> <ol> <li>在PC1上克隆好了github page的项目  <li>用户在PC1上部署一个PHP站点，并配置指向上面的github page的项目目录  <li>在PC1上使用windows writer配置这个站点为日志帐户  <li>在PC1上使用windows writer编写文章  <li>在PC1上将文章发布到PHP站点  <li>打开PHP站点的页面，修改分类、标签等必要信息，点击发布，PHP站点将把文章创建在github page的项目目录的对应文件夹中（包括图片）  <li>（可选）用jekyll测试页面，返回4，直到满意  <li>在PC1上使用git将github page的项目push到github</li></ol> <p>图中黄色的2、3步骤是一次性的配置工作，以后不需要重复进行。另外可以看到这里的PHP站点起到了“代理”的作用，因为github不能支持windows writer嘛，所以只能依靠代理了；而且这个代理是在你PC本机的，链接你的Writer和本地的仓库。</p> <p>&nbsp;</p> <p>如果你在家中和公司各有一台PC，可能希望在两台PC上都能编写博客，甚至发布博客，而这个代理是本机的，如何能实现在博客正式发布前”共享“呢？答案是文本数据库。来看多客户端情况下的工作机制（左边是之前的PC1）：</p> <p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" class="img-responsive" title="image" border="0" alt="image" src="http://fakelocalhost/assert/img/2013-10-23-5267ce0633ef9.png" width="545" height="426"></p> <ul style="list-style-type: none"> <li>1.这个PHP站点包含一个基于文本的数据库，用来存放每一篇发布到PHP站点的文章。<font color="%hff0000">并将这个PHP站点本身作为一个仓库推送到github</font>  <li>2.在另一台PC2上克隆或拉取仓库代码（包括文本数据库）  <li>3～5步跟上面的1～3相同，克隆或拉取github page所在仓库，配置PHP站点，配置writer  <li>6.利用writer的”打开远程文章“的功能，从PHP站点上得到文章标题、内容等  <li>7.继续编辑文章  <li>8.将文章发布到PHP站点  <li>9.打开PHP站点的页面，修改分类、标签等必要信息，点击发布，PHP站点将把文章创建在github page的项目目录的对应文件夹中（包括图片）  <li>10.（可选）用jekyll测试页面，返回7，直到满意  <li>11.在PC2上使用git将github page的项目push到github</li></ul> <p>&nbsp;</p> <p>通过上面的步骤可以继续编辑文章，达到共享的目的。起作用的关键其实是，PHP站点利用文本数据库和站点本身作为仓库这两点，保存了在PC1上的文章内容，可供PC2克隆或拉取。同理，也可以将PC2的PHP站点（及其数据文件）推送到github上，供PC1继续编辑发布。</p> <p>&nbsp;</p> <p>本文介绍了系统的工作机制。虽说有了这套东西，写博客会方便不少，但是操作还是比较琐碎的，因此需要对工作机制有比较清晰的了解，这对于用户来说是十分重要的。下一篇将指导用户具体操作过程。</p>#基于PHP的Windows Writer服务提供器--介绍#postlayout#介绍一个支持Windows Writer的PHP服务的实现和运行机制，有了这个PHP服务，用Writer来编写博客，插入图片就简单方便许多了。#1346208288725.jpg#[web-build]#[PHP,github-page]#2013-10-23 08:04:53#2013-10-27 22:01:24#
5#2013-10-23-5267e1c65917c.html#<p>在<a href="http://pchou.info/web-build/2013/10/23/526712a543031.html" target="_blank">上一篇</a>中介绍了系统的运行机制，本文将引导读者一步步部署并使用。首先，假设您已经完成了github博客的搭建工作，并理解基本的博客维护方式以及jekyll的基本原理和使用方法。</p> <p>&nbsp;</p> <h2>部署本地的PHP站点</h2> <p>PHP项目的主页地址：<a href="https://github.com/PChou/xmlrpc4ww">https://github.com/PChou/xmlrpc4ww</a></p> <p>用您自己的帐户登录github，在浏览器中键入上述地址，点击页面右上方的<code>Fork</code>。Fork的意思是将这个项目复制到您自己的代码仓库中，您就可以自由的修改编辑了，还能在需要的时候对原代码仓库贡献代码，或者同步原代码仓库的变化。</p> <p>将Fork出来的仓库clone到本地,，这地址应该像下面这样：</p><pre>git clone https://github.com/<em>{yourusername}</em>/xmlrpc4ww.git</pre>%n<p>项目目录中的文件结构如下（省略无关紧要的文件）</p><pre>/xmlrpc4ww%n  |--content //存放js和css%n  |--db%n      |--blog	//文本数据库%n           |--__blogs.txt //数据文件模板%n           |--blogs.txt	//数据文件%n  |--txtdb	//文本数据库支持库%n  |--xmlrpc	//xmlrpc api支持库%n  |--__config.php   //配置文件模板%n  |--post.php       //文章发布页面%n  |--postlist.php   //文章列表页面%n  |--server.php     //writer服务提供页面和文章列表入口%n  |--util2.php      //支持方法%n</pre>%n<p>将__config.php在同一目录复制一份，取名为<code>config.php</code>，修改config.php：</p><pre>define("LOCALPATH", "D:\\Project\\Git\\NRemedy");    \\本地github page项目所在目录，注意双斜杠%ndefine("IMGPATH", "assert\\img");		     \\图片的相对路径，此处就表示我的博客的图片规划在D:\Project\Git\NRemedy\assert\img下，注意双斜杠%ndefine("IMGPATH2", "/assert/img/");		     \\图片的url相对路径，与上面应对应，但注意斜杠的方向%n%ndefine("DEFAULT_LAYOUT", "postlayout");		      \\每个post的jekyll模板使用的默认的layout名称，配置这个后可以简化将来发布填写的东西%n%ndefine("BLOGNAME", "ghpage");			     \\blog名称，可以不作修改%ndefine("BLOGID","67322");			     \\blogid，可以不作修改%ndefine("BLOGURL","http://fakelocalhost");            \\blog地址，不要修改，保持fakelocalhost%n%n%n</pre>%n<p><font color="%hff0000">注意：上面的前三项务必配置准确，否则将无法正常使用</font></p>%n<p>删除<code>db/blog/blogs.txt</code>，将<code>__blogs.txt</code>重命名为<code>blogs.txt</code>。原先的blogs.txt是我的文章数据库，您需要的是空的数据库文件，所以从__blogs.txt这个空的数据文件模板开始，完成之后您的目录结构将是这样：</p><pre>/xmlrpc4ww%n  |--content //存放js和css%n  |--db%n      |--blogs	//文本数据库%n           |--blogs.txt	//空数据文件%n  |--txtdb	//文本数据库支持库%n  |--xmlrpc	//xmlrpc api支持库%n  |--config.php     //配置文件模板%n  |--post.php       //文章发布页面%n  |--postlist.php   //文章列表页面%n  |--server.php     //writer服务提供页面和文章列表入口%n  |--util2.php      //支持方法%n</pre>%n<p>接下来要做的是配置一个php运行环境，如果您已经配置过php环境，那么恭喜你，可以跳过这个步骤了。下载并安装php环境，读者可参考<a href="http://www.cnblogs.com/zengxiangzhan/archive/2010/03/05/1679286.html">http://www.cnblogs.com/zengxiangzhan/archive/2010/03/05/1679286.html</a></p>%n<p>&nbsp;</p>%n<p>在IIS中创建一个站点，指向xmlrpc4ww，启动该网站，并用浏览器访问<a href="http://localhost{:port}/server.php">http://localhost<em>{:port}</em>/server.php</a>，看到如下页面说明php站点部署完毕（请注意，您的端口可能与我不同）</p>%n<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" class="img-responsive" title="559EHMUA36]Z76X}}OP0V`L" border="0" alt="559EHMUA36]Z76X}}OP0V`L" src="http://fakelocalhost/assert/img/2013-10-23-5267e1c64ed6a.jpeg" width="638" height="28"> %n<p>&nbsp;</p>%n<h2>配置Windows Writer</h2>%n<p>点击“添加日志帐户”，选择“其他服务”</p><img style="display: inline" class="img-responsive" title="image" alt="image" src="http://fakelocalhost/assert/img/2013-01-20-build-github-blog-page-07-img1.png" width="403" height="379"> %n<p>按照下图输入日志网址，注意，你本机的PHP站点的端口可能与我不同，用户名和密码随便填，无所谓，暂时不要记住密码</p>%n<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" class="img-responsive" title="image" border="0" alt="image" src="http://fakelocalhost/assert/img/2013-10-24-52692c3153e36.png" width="398" height="375"></p>%n<p>点击“下一步”，按下图填写，注意这里的远程发布网址是关键点，必须填写正确，还是一样，请注意您本机的端口可能与我不同</p>%n<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" class="img-responsive" title="image" border="0" alt="image" src="http://fakelocalhost/assert/img/2013-10-24-52692c315bb38.png" width="402" height="379"></p>%n<p>点击“下一步”，windows writer会开始检测服务端设置</p>%n<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" class="img-responsive" title="image" border="0" alt="image" src="http://fakelocalhost/assert/img/2013-10-24-52692c3165392.png" width="403" height="380"></p>%n<p>最后会成功提示如下，可以点击Yes，发布一个测试日志，如下图。至此Writer和PHP站点打通了</p>%n<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" class="img-responsive" title="image" border="0" alt="image" src="http://fakelocalhost/assert/img/2013-10-24-52692c316efd4.png" width="419" height="179"></p>%n<p>将来发布日志的时候请选择ghpage发布</p>%n<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" class="img-responsive" title="image" border="0" alt="image" src="http://fakelocalhost/assert/img/2013-10-24-52692c317594e.png" width="220" height="84"> %n<p>&nbsp;</p>%n<h2>将日志发布到本地的gh-page</h2>%n<p>用浏览器访问<a href="http://localhost{:port}/server.php">http://localhost<em>{:port}</em>/server.php</a>，应该看到多出一条记录，这条记录就是刚刚发布的临时日志。点击“编辑和发布”，显示类似下面的页面</p>%n<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" class="img-responsive" title="JWAF752I~RH(OCJT5(`P`NT" border="0" alt="JWAF752I~RH(OCJT5(`P`NT" src="http://fakelocalhost/assert/img/2013-10-24-52692c317c2c7.jpeg" width="295" height="267"> %n<p>我们知道基于jekyll的post都应该有如下开头： <pre>---%nlayout: postlayout%ntitle: Hello GitHub!%ndescription: 该博客的开篇之文%nthumbimg: 1346208288725.jpg%ncategories: [life]%ntags: [github-page, jekyll]%n---%n</pre>%n<p>其中layout、title、categories、tags是jekyll默认支持的变量， 而且categories和tags有特定的格式。用户也可以自定义变量，可以在jekyll的post对象中获得这些变量。上面的description和thumnimg都是我自定义的变量，分别用于显示摘要和首页缩略图。 %n<p>与之对应的，上面的页面就是用来配置这些变量的。 %n<ul>%n<li>文件名是自动生成的，如果要修改的话请保持jekyll的日期规则，而且点击“保存并生成”后尽量不要再修改，否则，会生成两个日志； %n<li>标题来源于Writer中的标题，不能修改，只能由Writer发布上来； %n<li>layout的默认值来源与上面对PHP部署时的基础配置，应该修改成你希望的layout文件名； %n<li>分类和标签，请自行添加，但要符合jekyll规则</li></ul>%n<blockquote>%n<p>如果您的变量与我不同的话，需要自己修改php代码和数据库文件来支持。如果您希望修改的话，请将你fork的仓库地址发在下面的留言板里面，我可能考虑帮你修改。当然也许将来的版本我会发布一个可配置的版本</p></blockquote>%n<p>配置完成后，点击“保存并生成”，如果显示“成功”的话，恭喜您，文章已经在您本地的git仓库中拉。</p>%n<p>接下来您可以用本地的jekyll测试和发布你刚刚发布的文章，具体可以参考<a href="http://pchou.info/web-build/2013/01/05/build-github-blog-page-04.html">一步步在GitHub上创建博客主页(4)</a>以及相关的系列文章 %n<p>让我们来查看一下/xmlprc4ww/db/blogs.txt，此时，该文件应该已经包含了刚刚发布的日志以及post变量的配置等。顺便说一下，这个文件就是blogs的数据库文件，将来Writer从PHP站点获取或者写入的日志内容都将存放在这个文件中。 该文件除了前三行外，其他行都是数据，每一行由多个字段组成，每个字段用”%h“区隔，详见：<a href="http://www.c-worker.ch/txtdbapi/index.php">http://www.c-worker.ch/txtdbapi/index.php</a>&nbsp; <h2>&nbsp;</h2>%n<h2>编辑修改文章 </h2>%n<p>如果您的文章已经从Writer发布到PHP站点，甚至是发布到了github，但是此时需要修改一下，怎么办呢？很简单，您只需要在Writer中打开需要修改的文章，编辑好之后，点击发布，循环上面的步骤就可以了。 %n<blockquote>%n<p>您可能会发现再次打开后图片无法正常显示，这没关系，如果这导致Writer崩溃的话，请下载最新的Writer客户端；另外如果文章有图片的话在发布前请将图片“格式”设置成“链接至无”，否则会有两张图片上传到服务端</p></blockquote>%n<p>如果您只是用上面配置好的机器来编写博客的话，至此就足够了，下面介绍多客户端该怎么协同编辑。 %n<p>&nbsp; <h2>多客户端编辑</h2>%n<p>也许读者已经猜到了，没错，只要将xmlrpc4ww这个项目也push到github的仓库就可以了！上文提到，xmlprc4ww/db/blogs.txt保存了文章的内容，该内容是与本地Writer的内容同步的，于是只要将这个文件push到github上，然后在另外一台机器上pull过来，并且重复一次配置工作（包括站点配置、writer配置）就可以获得文章内容了。而在Writer的客户端上只要点击“打开最近使用过的日志”就可以从“另一个服务端”上获取文章内容了： %n<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" class="img-responsive" title="image" border="0" alt="image" src="http://fakelocalhost/assert/img/2013-10-24-52692c3183411.png" width="390" height="285"> %n<blockquote>%n<p>特别需要注意的是，您PC2上的日志仓库可能与PC1不同，在配置PHP站点的时候需要特别留意 </p></blockquote>%n<p>&nbsp;</p>%n<h2>删除文章</h2>%n<p>xmlrpc4ww没有实现删除的功能，您可能需要手动完成，除了把github page所在的仓库中的日志文件和对应图片删除外，还需要删除xmlprc4ww/db/blogs.txt中的对应记录行。</p>%n<p>&nbsp;</p>%n<p>本文详细介绍了<a href="https://github.com/PChou/xmlrpc4ww" target="_blank">xmlrpc4ww</a>这个工具的使用方法，如果读者有任何问题，可以给我发邮件或者在下面留言，您的意见或建议是完善这个工具重要的途径，当然您也可以帮忙共享您的代码，发扬开源精神。</p>#基于PHP的Windows Writer服务提供器--如何使用#postlayout#详细描述如何配置php站点、如何配置Windows Writer、如何发布文章等细节#1346208288725.jpg#[web-build]#[PHP,github-page]#2013-10-23 22:48:38#2013-10-27 22:02:10#
6#2013-10-27-526d0f1648b1d.html#<p>公司部署网络环境，安装Esxi，去电脑城配了两台台式机当服务器，为了充分利用资源，准备安装Esxi。以前在公司里面也用PC装过Esxi，从来没有出过岔子。但是这次出了不少岔子。  <p>先是没有安装光盘，但是这个很快通过U盘引导解决了。具体使用的是一个叫unetbootin-windows-latest.exe工具，可以一键将iso写入U盘：  <p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Image" border="0" alt="Image" src="http://fakelocalhost/assert/img/2013-10-27-526d0f162be26.png" width="449" height="332">  <p>然后，在安装过程中，报错说无法找到Network Adapter，寻寻觅觅，得知可能是vmware提供的安装包中没有我的网卡驱动，从这里可以查看自己的网卡是否被支持  <p><a href="http://www.vmware.com/resources/compatibility/search.php?deviceCategory=io">http://www.vmware.com/resources/compatibility/search.php?deviceCategory=io</a>  <p>如果不被支持的话必须，有三种解决途径  <p>1、如果是正规的品牌服务器的话，可以从服务器提供的光盘中找找有没有Esxi安装镜像，一般dell和hp都有提供各自定制化过的iso  <p>2、如果没有人家做好的iso的话，可以自己来做，去vmware网站上找驱动，然后用vmware提供的定制化iso工具ESXi-Customizer-v2.7.1，生成添加过驱动的iso  <p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Image(1)" border="0" alt="Image(1)" src="http://fakelocalhost/assert/img/2013-10-27-526d0f1633f10.png" width="449" height="286">  <p>3、上面两种方法都没有成功的话，只能考虑重新购买被支持的网卡，intel的千兆网卡一般都支持，笔者从电脑城弄了一块就OK了  <p>网卡关过了以后，又碰到无法找到硬盘的问题，这个问题可能是由于两个原因：  <p>1、如果是用U盘引导的，在loading界面结束后，U盘就可以拔掉了，否则可能只识别出U盘  <p>2、可能需要在BIOS中设置SATA的工作方式为AHCI  <p>最后，还会有个警告说硬件不支持虚拟化技术，这时，需要将BIOS中的CPU开启虚拟化支持，具体操作由于BIOS版本很杂，自己找吧  <p>Esxi5.1激活码0F0KM-FLL4L-NZHG1-1CA56-9CU4J  <p>输入激活码的方法是在vSphere Client中，选择“配置”，然后选“已获选可的功能”，再点“编辑”就能看到输入序列号的界面了。  #Esxi安装手记#postlayout#网卡驱动、硬盘模式、CPU模式是安装Esxi经常碰到的问题。本文记录了实际在部署Esxi的时候碰到的这些困难和解决方案。#image0021229433128273.jpg#[hardware]#[Esxi,iso,Driver]#2013-10-27 21:03:18#2013-10-27 21:03:18#
7#2013-11-07-527ba36a16888.html#<p>数据库是一种十分复杂的软件，它为用户提供了可靠的数据存储与查询机制，本文将来探讨一下其中的“可靠存储”这个问题。</p> <p>市面上的数据库产品众多，尤其是现在开始流行的“NO-SQL”（非关系型数据库），更是百花齐放</p> <p>数据库的可靠存储特性主要体现在如下几个方面：</p> <ol> <li>当出现硬件错误时，保证数据的一致性  <li>保证一系列的操作是原子的，要么成功要么失败  <li>当数据备份多处时，保证不同数据备份的一致性</li></ol> <p>这里所列出的可能不全，本文将浅谈这些都实现原理。</p> <p>&nbsp;</p> <p>预写日志</p> <p>数据一致性经常也被称为“事务一致性”，也就是保证一系列的操作，要么都成功要么都失败。例如有下面的关系数据表，存储了用户的账户信息：</p> <table border="0" cellspacing="0" cellpadding="2" width="400"> <tbody> <tr> <td valign="top" width="133">账户名称</td> <td valign="top" width="133">账户类型</td> <td valign="top" width="133">账户余额</td></tr> <tr> <td valign="top" width="133">扎迪</td> <td valign="top" width="133">支票</td> <td valign="top" width="133">800</td></tr> <tr> <td valign="top" width="133">扎迪</td> <td valign="top" width="133">存款</td> <td valign="top" width="133">300</td></tr> <tr> <td valign="top" width="133">皮德罗</td> <td valign="top" width="133">支票</td> <td valign="top" width="133">150</td></tr></tbody></table> <p>现在希望将扎迪的支票账户中的200元转移到扎迪存款账户里，最终结果希望是</p> <table border="0" cellspacing="0" cellpadding="2" width="401"> <tbody> <tr> <td valign="top" width="133">账户名称</td> <td valign="top" width="133">账户类型</td> <td valign="top" width="133">账户余额</td></tr> <tr> <td valign="top" width="133">扎迪</td> <td valign="top" width="133">支票</td> <td valign="top" width="133"><font color="%hff0000"><strong>600</strong></font></td></tr> <tr> <td valign="top" width="133">扎迪</td> <td valign="top" width="133">存款</td> <td valign="top" width="133"><font color="%hff0000"><strong>500</strong></font></td></tr> <tr> <td valign="top" width="133">皮德罗</td> <td valign="top" width="133">支票</td> <td valign="top" width="133">150</td></tr></tbody></table> <p>那么，我们可以将这个任务分两步来执行：</p> <ol> <li>先将扎迪的支票账户更新为600</li> <li>再将扎迪的存款账户更新为500</li></ol> <p>但是，这两个步骤不能保证要么同时成功要么同时失败的话，将出现很严重的后果。比如：当完成第一步后，突然断电了，扎迪会发现他的支票账户少了200元，但是存款账户仍然是300，凭空少了200元！尽管说，像断电这样的都是小概率事件，但是在上面这个例子中是绝对不被允许的。</p> <p>在数据库中为了解决这个问题，提出了事务的概念，程序员可以将两个步骤包装在一个事务中提交给数据库，数据库能够保证“事务一致性”。这样神奇的效果是如何实现的呢？其实原理很简单，就是所谓的“预写日志”：</p> <p>事务被提交给数据库后，数据库并不是立刻执行事务中的操作，而是将这些操作预先写入日志中，每写入一条操作的日志就执行一次事务中的操作。如上面的例子，数据库将会在日志中先后写入如下4条操作日志：</p> <ol> <li>开始事务</li> <li>将扎迪的支票账户余额<font color="%hff0000"><strong>从800变为600</strong></font></li> <li>将扎迪的存款账户余额<strong><font color="%hff0000">从300变成500</font></strong></li> <li>结束事务</li></ol> <p>当完成执行完“结束事务”后，删除上面的日志，这样，正常的操作就完成了。（有些数据库会在日志删除前再次写入“归档日志”中，以便可以通过归档日志恢复整个库）</p> <p>接下来，我们来论证一下，如果出现错误的话数据库如何处理呢？我们分下面几种情况讨论：</p> <ul> <li>如果在执行日志内容的过程中出现错误，当数据库重新启动后，由于有预写的日志，所以能够判断出数据库在某个事务过程中奔溃了。但是问题是，怎么才能知道究竟执行到哪一步了呢？事实上，这一点根本不重要，因为哪怕重新回放整个预写日志中的内容也仍然可以达到一致性。对于这种无论执行多少次都不会影响最终结果的特性称为“幂等”。</li> <li>如果写入日志的过程中就出现了错误，那么可能某个预写日志中没有类似“结束事务”这样的描述。此时，数据</li></ul> <p>&nbsp;</p> <p>为了保证一致性，数据库软件中一种精巧的方法实现</p>#数据库一致性原理#postlayout#description#thumbimg#categories#tags#2013-11-07 22:27:54#2013-11-07 22:27:54#